[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'wsdjeg/dein-ui.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'



#==================================================================================
#
#  language server protocol
#
#==================================================================================
[[plugins]]
repo = 'neovim/nvim-lsp'
hook_add = '''
lua require'nvim_lsp'.tsserver.setup{}

nnoremap <silent> gd    <cmd>lua vim.lsp.buf.declaration()<CR>
nnoremap <silent> gr    <cmd>lua vim.lsp.buf.references()<CR>
nnoremap <silent> <c-]> <cmd>lua vim.lsp.buf.definition()<CR>
nnoremap <silent> K     <cmd>lua vim.lsp.buf.hover()<CR>
nnoremap <silent> gD    <cmd>lua vim.lsp.buf.implementation()<CR>
nnoremap <silent> <c-k> <cmd>lua vim.lsp.buf.signature_help()<CR>
nnoremap <silent> 1gD   <cmd>lua vim.lsp.buf.type_definition()<CR>
'''


#==================================================================================
#
#  autocomplete
#
#==================================================================================
[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertEnter'
hook_add = '''
  let g:deoplete#enable_at_startup = 1
'''

[[plugins]]
repo = 'Shougo/deoplete-lsp'



#==================================================================================
#
#  denite.vim
#
#==================================================================================
[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>
    \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> d
    \ denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p
    \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> i
    \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space>
    \ denite#do_map('toggle_select').'j'
  endfunction

  let s:ignore_globs = ['.git', '.svn', 'node_modules']

  call denite#custom#var('file/rec', 'command', [
        \ 'ag',
        \ '--follow',
        \ ] + map(deepcopy(s:ignore_globs), { k, v -> '--ignore=' . v }) + [
        \ '--nocolor',
        \ '--nogroup',
        \ '-g',
        \ ''
        \ ])
  call denite#custom#filter('matcher/ignore_globs', 'ignore_globs', s:ignore_globs)
'''



#==================================================================================
#
#  lightline.vim
#
#==================================================================================
[[plugins]] # lightline.vim
repo = 'itchyny/lightline.vim'
hook_add = '''
  set laststatus=2
  " set statusline=%F%r%h%=
  " let g:solarized_termcolors=256
  let g:lightline = {
  \ 'component': {
  \   'readonly': '%{&readonly?"⭤":""}',
  \ },
  \ 'separator': { 'left': '⮀', 'right': '⮂' },
  \ 'subseparator': { 'left': '⮁', 'right': '⮃' }
  \ }
  let g:lightline = {
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ],
        \             [ 'fugitive', 'filename' ] ]
        \ },
        \ 'component_function': {
        \   'fugitive': 'LightLineFugitive',
        \   'readonly': 'LightLineReadonly',
        \   'modified': 'LightLineModified',
        \   'filename': 'LightLineFilename'
        \ },
        \ 'separator': { 'left': '⮀', 'right': '⮂' },
        \ 'subseparator': { 'left': '⮁', 'right': '⮃' }
        \ }

  function! LightLineModified()
    if &filetype == "help"
      return ""
    elseif &modified
      return "+"
    elseif &modifiable
      return ""
    else
      return ""
    endif
  endfunction

  function! LightLineReadonly()
    if &filetype == "help"
      return ""
    elseif &readonly
      return "⭤"
    else
      return ""
    endif
  endfunction

  function! LightLineFugitive()
    return exists('*fugitive#head') ? fugitive#head() : ''
  endfunction

  function! LightLineFilename()
    return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
         \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
         \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
  endfunction

  function! LightLineFugitive()
    if exists("*fugitive#head")
      let branch = fugitive#head()
      return branch !=# '' ? '⭠ '.branch : ''
    endif
    return ''
  endfunction
'''




#==================================================================================
#
#  others
#
#==================================================================================
[[plugins]] # カッコ同士のジャンプ機能にhtmlタグなどへの対応
repo = 'tmhedberg/matchit'

[[plugins]] # コードの{}カッコなどの開閉
repo = 'AndrewRadev/splitjoin.vim'

[[plugins]] #バッファの変更の自動更新
repo = 'djoshea/vim-autoread'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'tpope/vim-surround'




#==================================================================================
#
#  syntax highlight
#
#==================================================================================
[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]] # yaml syntax
repo = 'chase/vim-ansible-yaml'
on_ft = 'yaml'

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
hook_source = '''
let g:rustfmt_autosave = 1
'''

[[plugins]] #taglist.vim
repo = 'vim-scripts/taglist.vim'




#==================================================================================
#
#  colorscheme
#
#==================================================================================
[[plugins]]
repo = 'AlessandroYorba/Sierra'
hook_add = '''
  let g:sierra_Pitch = 1
  au MyAutoCmd VimEnter * nested colorscheme sierra
  " let g:lightline = { 'colorscheme': 'sierra' }
'''




