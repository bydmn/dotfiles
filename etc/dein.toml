[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'



#==================================================================================
#
#  language server protocol
#
#==================================================================================
[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = 'bash install.sh'
hook_add = '''
set hidden

let g:LanguageClient_autoStart = 0
nnoremap <Space>l :LanguageClientStart<CR>

let g:LanguageClient_serverCommands = {
    \ 'rust': ['rustup', 'run', 'stable', 'rls'],
    \ 'javascript': ['javascript-typescript-stdio'],
    \ 'javascript.jsx': ['javascript-typescript-stdio'],
    \ 'typescript': ['javascript-typescript-stdio'],
    \ 'typescript.jsx': ['javascript-typescript-stdio'],
    \ 'css': ['css-languageserver', '--stdio'],
    \ 'scss': ['css-languageserver', '--stdio'],
    \ 'sass': ['css-languageserver', '--stdio'],
    \ }

nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>


" install depends node module
if executable('npm')

  if !executable('javascript-typescript-stdio')
    call system('npm i -g javascript-typescript-langserver')
  endif

  if !executable('css-languageserver')
    call system('npm i -g vscode-css-languageserver-bin')
  endif

endif
'''



#==================================================================================
#
#  autocomplete
#
#==================================================================================
[[plugins]] # deoplete
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertEnter'
hook_add = '''
  " Use deoplete.
  let g:deoplete#enable_at_startup = 1
  inoremap <expr><tab> pumvisible() ? "\<C-n>" :
          \ neosnippet#expandable_or_jumpable() ?
          \    "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
'''
on_i = 1

[[plugins]]
repo = 'roxma/nvim-yarp'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

[[plugins]]
repo = 'sebastianmarkow/deoplete-rust'
on_ft = 'rust'
depends = ['deoplete.nvim']
hook_source = '''
    let g:deoplete#sources#rust#racer_binary="$HOME/.cargo/bin/racer"
    let g:deoplete#sources#rust#rust_source_path="$(rustc --print sysroot)/lib/rustlib/src/rust/src"
    let g:deoplete#sources#rust#show_duplicates=1
    let g:deoplete#sources#rust#disable_keymap=1
    nmap <buffer> gd <plug>DeopleteRustGoToDefinitionDefault
    nmap <buffer> K  <plug>DeopleteRustShowDocumentation
'''

[[plugins]]
repo = 'Shougo/neosnippet'
on_event = 'InsertCharPre'
on_ft = 'snippet'
on_i = 1
hook_add = '''
  let g:neosnippet#snippets_directory='~/.vim/bundle/neosnippet-snippets/snippets/'

  " Plugin key-mappings.
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)
   
  " SuperTab like snippets behavior.
  imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)"
  \: pumvisible() ? "\<C-n>" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)"
  \: "\<TAB>"
   
  " For snippet_complete marker.
  if has('conceal')
    set conceallevel=2 concealcursor=i
  endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/denite.nvim'



#==================================================================================
#
#  lightline.vim
#
#==================================================================================
[[plugins]] # lightline.vim
repo = 'itchyny/lightline.vim'
hook_add = '''
  set laststatus=2
  " set statusline=%F%r%h%=
  " let g:solarized_termcolors=256
  let g:lightline = {
  \ 'component': {
  \   'readonly': '%{&readonly?"⭤":""}',
  \ },
  \ 'separator': { 'left': '⮀', 'right': '⮂' },
  \ 'subseparator': { 'left': '⮁', 'right': '⮃' }
  \ }
  let g:lightline = {
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ],
        \             [ 'fugitive', 'filename' ] ]
        \ },
        \ 'component_function': {
        \   'fugitive': 'LightLineFugitive',
        \   'readonly': 'LightLineReadonly',
        \   'modified': 'LightLineModified',
        \   'filename': 'LightLineFilename'
        \ },
        \ 'separator': { 'left': '⮀', 'right': '⮂' },
        \ 'subseparator': { 'left': '⮁', 'right': '⮃' }
        \ }

  function! LightLineModified()
    if &filetype == "help"
      return ""
    elseif &modified
      return "+"
    elseif &modifiable
      return ""
    else
      return ""
    endif
  endfunction

  function! LightLineReadonly()
    if &filetype == "help"
      return ""
    elseif &readonly
      return "⭤"
    else
      return ""
    endif
  endfunction

  function! LightLineFugitive()
    return exists('*fugitive#head') ? fugitive#head() : ''
  endfunction

  function! LightLineFilename()
    return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
         \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
         \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
  endfunction

  function! LightLineFugitive()
    if exists("*fugitive#head")
      let branch = fugitive#head()
      return branch !=# '' ? '⭠ '.branch : ''
    endif
    return ''
  endfunction
'''




#==================================================================================
#
#  others
#
#==================================================================================
[[plugins]] # カッコ同士のジャンプ機能にhtmlタグなどへの対応
repo = 'tmhedberg/matchit'

[[plugins]] # コードの{}カッコなどの開閉
repo = 'AndrewRadev/splitjoin.vim'

[[plugins]] # コメントアウトの切り替え
repo = 'tomtom/tcomment_vim'

[[plugins]] #バッファの変更の自動更新
repo = 'djoshea/vim-autoread'

[[plugins]] # nerdtree
repo = 'scrooloose/nerdtree'
hook_add = '''
  "  隠しファイルは常に表示
  let NERDTreeShowHidden = 1
  nnoremap <Space>n  :NERDTreeToggle<CR>
'''

[[plugins]] # emmet-vim
repo = 'mattn/emmet-vim'
hook_add = '''
  let g:user_emmet_leader_key='<c-e>'
  let g:user_emmet_settings = {
  \    'variables': {
  \      'lang': "ja"
  \    },
  \   'indentation': '  '
  \ }
'''

[[plugins]] # vim-fugitive
repo = 'tpope/vim-fugitive'

[[plugins]] # vim-surround
repo = 'tpope/vim-surround'




#==================================================================================
#
#  syntax highlight
#
#==================================================================================
[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]] # yaml syntax
repo = 'chase/vim-ansible-yaml'
on_ft = 'yaml'

[[plugins]] # javascript syntax
repo = 'pangloss/vim-javascript'

[[plugins]] #es2015のハイライト
repo = 'othree/yajs.vim'

[[plugins]] #esnext syntax
repo = 'othree/es.next.syntax.vim'

[[plugins]] #jsx syntax
repo = 'maxmellon/vim-jsx-pretty'

[[plugins]] #typescript syntax
repo = 'leafgarland/typescript-vim'
on_ft = 'typescript'

[[plugins]] #typescript jsx syntax
repo = 'peitalin/vim-jsx-typescript'
on_ft = ['typescript', 'typescript.jsx']

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
hook_source = '''
let g:rustfmt_autosave = 1
'''

[[plugins]] #taglist.vim
repo = 'vim-scripts/taglist.vim'




#==================================================================================
#
#  colorscheme
#
#==================================================================================
[[plugins]]
repo = 'AlessandroYorba/Sierra'
hook_add = '''
  let g:sierra_Pitch = 1
  au MyAutoCmd VimEnter * nested colorscheme sierra
  let g:lightline = { 'colorscheme': 'sierra' }
'''




